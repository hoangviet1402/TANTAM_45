//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TanTamApi.UploadFileService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [WebServiceBinding(Name="FileUploadSvcSoap", Namespace="http://tempuri.org/")]
    public partial class FileUploadSvc : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadImageResizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadImageGuildResizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadBannerOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveJPEGOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public FileUploadSvc() {
            this.Url = global::TanTamApi.Properties.Settings.Default.HoYeahMobileApi_UploadFileService_FileUploadSvc;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadImageCompletedEventHandler UploadImageCompleted;
        
        /// <remarks/>
        public event UploadImageResizeCompletedEventHandler UploadImageResizeCompleted;
        
        /// <remarks/>
        public event UploadImageGuildResizeCompletedEventHandler UploadImageGuildResizeCompleted;
        
        /// <remarks/>
        public event UploadBannerCompletedEventHandler UploadBannerCompleted;
        
        /// <remarks/>
        public event SaveJPEGCompletedEventHandler SaveJPEGCompleted;
        
        /// <remarks/>
        [SoapDocumentMethod("http://tempuri.org/UploadImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UploadImageResult UploadImage(TypeImageUploadEnum type, string pathOrFileName, [XmlElement(DataType="base64Binary")] byte[] byteArray) {
            object[] results = this.Invoke("UploadImage", new object[] {
                        type,
                        pathOrFileName,
                        byteArray});
            return ((UploadImageResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadImageAsync(TypeImageUploadEnum type, string pathOrFileName, byte[] byteArray) {
            this.UploadImageAsync(type, pathOrFileName, byteArray, null);
        }
        
        /// <remarks/>
        public void UploadImageAsync(TypeImageUploadEnum type, string pathOrFileName, byte[] byteArray, object userState) {
            if ((this.UploadImageOperationCompleted == null)) {
                this.UploadImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadImageOperationCompleted);
            }
            this.InvokeAsync("UploadImage", new object[] {
                        type,
                        pathOrFileName,
                        byteArray}, this.UploadImageOperationCompleted, userState);
        }
        
        private void OnUploadImageOperationCompleted(object arg) {
            if ((this.UploadImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadImageCompleted(this, new UploadImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapDocumentMethod("http://tempuri.org/UploadImageResize", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UploadImageResult UploadImageResize(TypeImageUploadEnum type, string pathOrFileName, [XmlElement(DataType="base64Binary")] byte[] byteArray, int width, int height) {
            object[] results = this.Invoke("UploadImageResize", new object[] {
                        type,
                        pathOrFileName,
                        byteArray,
                        width,
                        height});
            return ((UploadImageResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadImageResizeAsync(TypeImageUploadEnum type, string pathOrFileName, byte[] byteArray, int width, int height) {
            this.UploadImageResizeAsync(type, pathOrFileName, byteArray, width, height, null);
        }
        
        /// <remarks/>
        public void UploadImageResizeAsync(TypeImageUploadEnum type, string pathOrFileName, byte[] byteArray, int width, int height, object userState) {
            if ((this.UploadImageResizeOperationCompleted == null)) {
                this.UploadImageResizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadImageResizeOperationCompleted);
            }
            this.InvokeAsync("UploadImageResize", new object[] {
                        type,
                        pathOrFileName,
                        byteArray,
                        width,
                        height}, this.UploadImageResizeOperationCompleted, userState);
        }
        
        private void OnUploadImageResizeOperationCompleted(object arg) {
            if ((this.UploadImageResizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadImageResizeCompleted(this, new UploadImageResizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapDocumentMethod("http://tempuri.org/UploadImageGuildResize", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UploadImageResult UploadImageGuildResize(string alias, string pathOrFileName, [XmlElement(DataType="base64Binary")] byte[] byteArray, int width, int height) {
            object[] results = this.Invoke("UploadImageGuildResize", new object[] {
                        alias,
                        pathOrFileName,
                        byteArray,
                        width,
                        height});
            return ((UploadImageResult)(results[0]));
        }
        
        /// <remarks/>
        public void UploadImageGuildResizeAsync(string alias, string pathOrFileName, byte[] byteArray, int width, int height) {
            this.UploadImageGuildResizeAsync(alias, pathOrFileName, byteArray, width, height, null);
        }
        
        /// <remarks/>
        public void UploadImageGuildResizeAsync(string alias, string pathOrFileName, byte[] byteArray, int width, int height, object userState) {
            if ((this.UploadImageGuildResizeOperationCompleted == null)) {
                this.UploadImageGuildResizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadImageGuildResizeOperationCompleted);
            }
            this.InvokeAsync("UploadImageGuildResize", new object[] {
                        alias,
                        pathOrFileName,
                        byteArray,
                        width,
                        height}, this.UploadImageGuildResizeOperationCompleted, userState);
        }
        
        private void OnUploadImageGuildResizeOperationCompleted(object arg) {
            if ((this.UploadImageGuildResizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadImageGuildResizeCompleted(this, new UploadImageGuildResizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapDocumentMethod("http://tempuri.org/UploadBanner", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadBanner([XmlElement(DataType="base64Binary")] byte[] byteArray, string upPath, string newName) {
            object[] results = this.Invoke("UploadBanner", new object[] {
                        byteArray,
                        upPath,
                        newName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadBannerAsync(byte[] byteArray, string upPath, string newName) {
            this.UploadBannerAsync(byteArray, upPath, newName, null);
        }
        
        /// <remarks/>
        public void UploadBannerAsync(byte[] byteArray, string upPath, string newName, object userState) {
            if ((this.UploadBannerOperationCompleted == null)) {
                this.UploadBannerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadBannerOperationCompleted);
            }
            this.InvokeAsync("UploadBanner", new object[] {
                        byteArray,
                        upPath,
                        newName}, this.UploadBannerOperationCompleted, userState);
        }
        
        private void OnUploadBannerOperationCompleted(object arg) {
            if ((this.UploadBannerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadBannerCompleted(this, new UploadBannerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [SoapDocumentMethod("http://tempuri.org/SaveJPEG", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveJPEG(string strjpg, string pathFile) {
            this.Invoke("SaveJPEG", new object[] {
                        strjpg,
                        pathFile});
        }
        
        /// <remarks/>
        public void SaveJPEGAsync(string strjpg, string pathFile) {
            this.SaveJPEGAsync(strjpg, pathFile, null);
        }
        
        /// <remarks/>
        public void SaveJPEGAsync(string strjpg, string pathFile, object userState) {
            if ((this.SaveJPEGOperationCompleted == null)) {
                this.SaveJPEGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveJPEGOperationCompleted);
            }
            this.InvokeAsync("SaveJPEG", new object[] {
                        strjpg,
                        pathFile}, this.SaveJPEGOperationCompleted, userState);
        }
        
        private void OnSaveJPEGOperationCompleted(object arg) {
            if ((this.SaveJPEGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveJPEGCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [Serializable()]
    [XmlType(Namespace="http://tempuri.org/")]
    public enum TypeImageUploadEnum {
        
        /// <remarks/>
        Avatar,
        
        /// <remarks/>
        Article,
        
        /// <remarks/>
        ScreenCapture,
        
        /// <remarks/>
        Banner,
        
        /// <remarks/>
        Comment,
        
        /// <remarks/>
        Another,
        
        /// <remarks/>
        Guild,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    [XmlType(Namespace="http://tempuri.org/")]
    public partial class UploadImageResult {
        
        private bool isSuccessField;
        
        private string messageField;
        
        private string imagePathField;
        
        /// <remarks/>
        public bool IsSuccess {
            get {
                return this.isSuccessField;
            }
            set {
                this.isSuccessField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string ImagePath {
            get {
                return this.imagePathField;
            }
            set {
                this.imagePathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UploadImageCompletedEventHandler(object sender, UploadImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UploadImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UploadImageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UploadImageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UploadImageResizeCompletedEventHandler(object sender, UploadImageResizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UploadImageResizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadImageResizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UploadImageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UploadImageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UploadImageGuildResizeCompletedEventHandler(object sender, UploadImageGuildResizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UploadImageGuildResizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadImageGuildResizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UploadImageResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UploadImageResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UploadBannerCompletedEventHandler(object sender, UploadBannerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [DebuggerStepThrough()]
    [DesignerCategory("code")]
    public partial class UploadBannerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadBannerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SaveJPEGCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591