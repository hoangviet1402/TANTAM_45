using System;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using BussinessObject;
using BussinessObject.Enum;
using BussinessObject.Models.ApiResponse;
using BussinessObject.Models.Company;
using BussinessObject.Models.Shift;
using Logger;
using MyUtility;
using MyUtility.Extensions;
using Newtonsoft.Json;
using ServiceStack.Templates;
using TanTamApi.JWT.Helper;

namespace TanTamApi.Controllers
{
    [RoutePrefix("api/shift")]
    public class ShiftController : ApiController
    {
        [HttpPost, Route("times-get")]
        public HttpResponseMessage GetTimes([FromBody] GetTimesRequest request)
        {
            var response = new ApiResult<TimesResponse>()
            {
                Data = new TimesResponse(),
                Code = ResponseResultEnum.ServiceUnavailable.Value(),
                Message = ResponseResultEnum.ServiceUnavailable.Text()
            };
            try
            {
                response = BoFactory.Shift.GetTimes(request.Lang ?? "vi");
            }
            catch (Exception ex)
            {
                CommonLogger.DefaultLogger.ErrorFormat("shift GetTimes EX:", ex);
                response.Code = ResponseResultEnum.SystemError.Value();
                response.Message = "Đã xảy ra lỗi trong quá trình xử lý";
            }
            return Request.CreateResponse(HttpStatusCode.OK, response);

        }

        [JWT.Middleware.Authorize]
        [HttpPost, Route("create-shift-and-assign-shift")]
        public HttpResponseMessage CreateShiftAndAssignShift([FromBody] ShiftCreateAndAssignRequest request)
        {
            var response = new ApiResult<ShiftCreateAndAssignResponse>()
            {
                Data = new ShiftCreateAndAssignResponse(),
                Code = ResponseResultEnum.Success.Value(),
                Message = ResponseResultEnum.Success.Text()
            };
            try
            {

                var companyId = JwtHelper.GetCompanyIdFromToken(Request);
                var accountMapID = JwtHelper.GetAccountMapIDFromToken(Request);
                response = BoFactory.Shift.ShiftCreateAndAssign(request, companyId , accountMapID);
            }
            catch (Exception ex)
            {
                CommonLogger.DefaultLogger.ErrorFormat("shift CreateShiftAndAssignShift EX:", ex);
                response.Code = ResponseResultEnum.SystemError.Value();
                response.Message = "Đã xảy ra lỗi trong quá trình xử lý";
            }
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }

        [JWT.Middleware.Authorize]
        [HttpPost, Route("create-shift")]
        public HttpResponseMessage CreateShift([FromBody] ShiftCreateAndAssignRequest request)
        {
            var response = new ApiResult<ShiftCreateAndAssignResponse>()
            {
                Data = new ShiftCreateAndAssignResponse(),
                Code = ResponseResultEnum.Success.Value(),
                Message = ResponseResultEnum.Success.Text()
            };
            try
            {
                var companyId = JwtHelper.GetCompanyIdFromToken(Request);
                response = BoFactory.Shift.ShiftCreateAndAssign(request, companyId, 0);
            }
            catch (Exception ex)
            {
                CommonLogger.DefaultLogger.ErrorFormat("shift CreateShiftAndAssignShift EX:", ex);
                response.Code = ResponseResultEnum.SystemError.Value();
                response.Message = "Đã xảy ra lỗi trong quá trình xử lý";
            }
            return Request.CreateResponse(HttpStatusCode.OK, response);
        }

        [HttpGet, Route("list-employee-shift")]
        public HttpResponseMessage ListEmployeeShift(int assignmentUserID = 0)
        {
            var response = new ApiResult<object>()
            {
                Code = ResponseResultEnum.Success.Value(),
                Message = ResponseResultEnum.Success.Text()
            };
            try
            {
                #region demo
                //    var jsonString = @"[
                //    {
                //        ""id"": 6,
                //        ""name"": ""Ca hành chính"",
                //        ""shift_key"": ""CA_HANH_CHINH"",
                //        ""shift_id"": 5,
                //        ""shift_type"": ""hard"",
                //        ""start_time"": ""2025-06-09 09:00:00"",
                //        ""end_time"": ""2025-06-09 17:30:00"",
                //        ""working_hour"": 8.5,
                //        ""working_day"": ""2025-06-09 00:00:00"",
                //        ""week_of_year"": 24,
                //        ""branch_id"": 3,
                //        ""user_id"": 2,
                //        ""checkin_time"": null,
                //        ""checkout_time"": null,
                //        ""is_confirm"": 1,
                //        ""is_overtime_shift"": 0,
                //        ""shop_id"": 4,
                //        ""meal_coefficient"": 0,
                //        ""timezone"": ""Asia/Bangkok"",
                //        ""is_open_shift"": 0,
                //        ""dynamic_user_id"": null,
                //        ""checkin_type"": """",
                //        ""checkout_type"": """",
                //        ""employees"": [
                //            {
                //                ""username"": ""+84111111121"",
                //                ""name"": ""111111121"",
                //                ""user_id"": 2
                //            }
                //        ],
                //        ""clock_status"": ""clock_in"",
                //        ""is_active"": true,
                //        ""locations"": []
                //    }
                //]"; JsonConvert.DeserializeObject(jsonString);
                #endregion
                var companyId = JwtHelper.GetCompanyIdFromToken(Request);
                var accountId = JwtHelper.GetAccountIdFromToken(Request);
                var accountIdMap = JwtHelper.GetAccountMapIDFromToken(Request);


                //response.Data = BoFactory.Payroll.Payroll_User_GetList(assignmentUserID, accountIdMap);
            }
            catch (Exception ex)
            {
                CommonLogger.DefaultLogger.ErrorFormat("shift ListEmployeeShift EX:", ex);
                response.Code = ResponseResultEnum.SystemError.Value();
                response.Message = "Đã xảy ra lỗi trong quá trình xử lý";
            }
            return Request.CreateResponse(HttpStatusCode.OK, response);

        }

        [JWT.Middleware.Authorize]
        [HttpGet, Route("status-clock-in-out-shift")]
        public HttpResponseMessage StatusClockInOutShift(string timekeeper_device = "", int is_show_button = 0,bool isInitial = false)
        {
            var response = new ApiResult<StatusClockInOutShiftResponse>()
            {
                Data = new StatusClockInOutShiftResponse(),
                Code = ResponseResultEnum.Success.Value(),
                Message = ResponseResultEnum.Success.Text()
            };
            try
            {
                var accountIdMap = JwtHelper.GetAccountMapIDFromToken(Request);
                response = BoFactory.Payroll.StatusClockInOutShift(accountIdMap, DateTime.Now , timekeeper_device, is_show_button, isInitial);
            }
            catch (Exception ex)
            {
                CommonLogger.DefaultLogger.ErrorFormat("shift ListEmployeeShift EX:", ex);
                response.Code = ResponseResultEnum.SystemError.Value();
                response.Message = "Đã xảy ra lỗi trong quá trình xử lý";
            }
            return Request.CreateResponse(HttpStatusCode.OK, response);

        }

        [HttpGet, Route("clock-in-out-shift")]
        public HttpResponseMessage ClockInOutShift([FromBody] ClockInOutShiftRequest request)
        {
            var response = new ApiResult<object>()
            {
                Code = ResponseResultEnum.Success.Value(),
                Message = ResponseResultEnum.Success.Text()
            };
            try
            {
                #region demo
                //string clock_type = request.ClockType;
                //string jsonString = "";
                //if (clock_type == "clock_out")
                //{
                //    jsonString = @"{
                //""next_clock_type"": ""clock_in"",
                //""current_employee_shift"": {
                //    ""id"": ""683412a08fb63932d90cd06b"",
                //    ""name"": ""ca2"",
                //    ""shift_key"": ""CA2"",
                //    ""shift_id"": ""682f0ca6fdeac0f5570d3317"",
                //    ""shift_type"": ""hard"",
                //    ""start_time"": ""2025-06-09 08:00:00"",
                //    ""end_time"": ""2025-06-09 17:30:00"",
                //    ""working_hour"": 9.5,
                //    ""working_day"": ""2025-06-09 00:00:00"",
                //    ""week_of_year"": 24,
                //    ""branch_id"": ""682ef049dc534fa14b0dedf4"",
                //    ""user_id"": ""682eefe1189d3q7Nz"",
                //    ""checkin_time"": null,
                //    ""checkout_time"": ""2025-06-09 18:46:00"",
                //    ""is_confirm"": 1,
                //    ""is_overtime_shift"": 0,
                //    ""shop_id"": ""682eefe18cdcf28162021f37"",
                //    ""meal_coefficient"": 0,
                //    ""timezone"": ""Asia/Saigon"",
                //    ""is_open_shift"": 0,
                //    ""dynamic_user_id"": null,
                //    ""checkin_type"": """",
                //    ""checkout_type"": ""mobile"",
                //    ""checkout_log_id"": ""6846c9a7fbb1987f350878f3"",
                //    ""checkout_branch_id"": ""682ef049dc534fa14b0dedf4""
                //},
                //""timekeeper_log"": {
                //    ""id"": ""6846c9a7fbb1987f350878f3"",
                //    ""time"": ""2025-06-09 18:46:47"",
                //    ""clock_type"": ""clock_out""
                //}
                //}";
                //}
                //else
                //{
                //    jsonString = @"{
                //""next_clock_type"": ""clock_out"",
                //""current_employee_shift"": {
                //    ""id"": ""683412a08fb63932d90cd06b"",
                //    ""name"": ""ca2"",
                //    ""shift_key"": ""CA2"",
                //    ""shift_id"": ""682f0ca6fdeac0f5570d3317"",
                //    ""shift_type"": ""hard"",
                //    ""start_time"": ""2025-06-09 08:00:00"",
                //    ""end_time"": ""2025-06-09 17:30:00"",
                //    ""working_hour"": 9.5,
                //    ""working_day"": ""2025-06-09 00:00:00"",
                //    ""week_of_year"": 24,
                //    ""branch_id"": ""682ef049dc534fa14b0dedf4"",
                //    ""user_id"": ""682eefe1189d3q7Nz"",
                //    ""checkin_time"": null,
                //    ""checkout_time"": ""2025-06-09 18:46:00"",
                //    ""is_confirm"": 1,
                //    ""is_overtime_shift"": 0,
                //    ""shop_id"": ""682eefe18cdcf28162021f37"",
                //    ""meal_coefficient"": 0,
                //    ""timezone"": ""Asia/Saigon"",
                //    ""is_open_shift"": 0,
                //    ""dynamic_user_id"": null,
                //    ""checkin_type"": """",
                //    ""checkout_type"": ""mobile"",
                //    ""checkout_log_id"": ""6846c9a7fbb1987f350878f3"",
                //    ""checkout_branch_id"": ""682ef049dc534fa14b0dedf4""
                //},
                //""timekeeper_log"": {
                //    ""id"": ""6846c9a7fbb1987f350878f3"",
                //    ""time"": ""2025-06-09 18:46:47"",
                //    ""clock_type"": ""clock_in""
                //}
                //}";
                //}

                #endregion 
                var accountIdMap = JwtHelper.GetAccountMapIDFromToken(Request);
                var companyIdMap = JwtHelper.GetCompanyIdFromToken(Request);
                response.Data = BoFactory.Payroll.ClockInOutShift(request, accountIdMap, companyIdMap,DateTime.Now);
            }
            catch (Exception ex)
            {
                CommonLogger.DefaultLogger.ErrorFormat("shift ListEmployeeShift EX:", ex);
                response.Code = ResponseResultEnum.SystemError.Value();
                response.Message = "Đã xảy ra lỗi trong quá trình xử lý";
            }
            return Request.CreateResponse(HttpStatusCode.OK, response);

        }

        /// <summary>
        /// Get list of shift assignments with shift details
        /// </summary>
        [TanTamApi.JWT.Middleware.Authorize]
        [HttpGet]
        [Route("list-shift-assignment-with-shift-v2")]
        public IHttpActionResult ListShiftAssignmentWithShiftV2()
        {
            try
            {
                var companyId = JwtHelper.GetCompanyIdFromToken(Request);
                var employeeId = JwtHelper.GetAccountMapIDFromToken(Request);

                if (companyId <= 0 || employeeId <= 0)
                {
                    return Content(HttpStatusCode.Unauthorized, new ApiResult<object>
                    {
                        Code = ResponseResultEnum.InvalidToken.Value(),
                        Message = "Phiên đăng nhập không hợp lệ"
                    });
                }

                var result = BoFactory.Shift.GetListShiftAssignmentWithShift(companyId, employeeId);
                return Ok(result);
            }
            catch (Exception ex)
            {
                CommonLogger.DefaultLogger.Error($"ListShiftAssignmentWithShiftV2 Exception.", ex);
                return Content(HttpStatusCode.InternalServerError, new ApiResult<object>
                {
                    Code = ResponseResultEnum.SystemError.Value(),
                    Message = "Đã xảy ra lỗi trong quá trình xử lý."
                });
            }
        }

        /// <summary>
        /// Get summary of employee shifts
        /// </summary>
        [TanTamApi.JWT.Middleware.Authorize]
        [HttpGet]
        [Route("summary-employee-shift")]
        public IHttpActionResult SummaryEmployeeShift()
        {
            try
            {
                var companyId = JwtHelper.GetCompanyIdFromToken(Request);
                var employeeId = JwtHelper.GetAccountMapIDFromToken(Request);

                if (companyId <= 0 || employeeId <= 0)
                {
                    return Content(HttpStatusCode.Unauthorized, new ApiResult<object>
                    {
                        Code = ResponseResultEnum.InvalidToken.Value(),
                        Message = "Phiên đăng nhập không hợp lệ"
                    });
                }

                var result = BoFactory.Shift.GetEmployeeShiftSummary(companyId, employeeId);
                return Ok(result);
            }
            catch (Exception ex)
            {
                CommonLogger.DefaultLogger.Error($"SummaryEmployeeShift Exception.", ex);
                return Content(HttpStatusCode.InternalServerError, new ApiResult<object>
                {
                    Code = ResponseResultEnum.SystemError.Value(),
                    Message = "Đã xảy ra lỗi trong quá trình xử lý."
                });
            }
        }

        /// <summary>
        /// Get list of open shifts
        /// </summary>
        [TanTamApi.JWT.Middleware.Authorize]
        [HttpGet]
        [Route("list-open-shift")]
        public IHttpActionResult ListOpenShift([FromUri] ListOpenShiftRequest request)
        {
            try
            {
                var companyId = JwtHelper.GetCompanyIdFromToken(Request);
                var employeeId = JwtHelper.GetAccountMapIDFromToken(Request);

                if (companyId <= 0 || employeeId <= 0)
                {
                    return Content(HttpStatusCode.Unauthorized, new ApiResult<object>
                    {
                        Code = ResponseResultEnum.InvalidToken.Value(),
                        Message = "Phiên đăng nhập không hợp lệ"
                    });
                }

                var result = BoFactory.Shift.GetListOpenShift(companyId, employeeId, request);
                return Ok(result);
            }
            catch (Exception ex)
            {
                CommonLogger.DefaultLogger.Error($"ListOpenShift Exception.", ex);
                return Content(HttpStatusCode.InternalServerError, new ApiResult<object>
                {
                    Code = ResponseResultEnum.SystemError.Value(),
                    Message = "Đã xảy ra lỗi trong quá trình xử lý."
                });
            }
        }
    }
}